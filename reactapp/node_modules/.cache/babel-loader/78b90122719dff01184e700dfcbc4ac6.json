{"ast":null,"code":"// import { useEffect, useReducer, useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// const init = {\n//     // for loginAll table\n//     // uname: { value: \"\", hasError: true, touched: false, error: \"\" },\n//     // password: { value: \"\", hasError: true, touched: false, error: \"\" },\n//     // role: \"Ambulance\",\n//     // let aid = JSON.parse(localStorage.getItem(\"loginInfo\")).aid;\n//     drivername: { value: JSON.parse(localStorage.getItem(\"loginInfo\")).drivername, hasError: true, touched: false, error: \"\" },\n//     // drivername: { value: \"\", hasError: true, touched: false, error: \"\" },\n//     aregno: { value: JSON.parse(localStorage.getItem(\"loginInfo\")).aregno, hasError: true, touched: false, error: \"\" },\n//     avehicalno: { value: JSON.parse(localStorage.getItem(\"loginInfo\")).avehicalno, hasError: true, touched: false, error: \"\" },\n//     email: {value:JSON.parse(localStorage.getItem(\"loginInfo\")).email},\n//     mono: { value: JSON.parse(localStorage.getItem(\"loginInfo\")).mono, hasError: true, touched: false, error: \"\" },\n//     website: {value:JSON.parse(localStorage.getItem(\"loginInfo\")).website},\n//     state:{value: JSON.parse(localStorage.getItem(\"loginInfo\")).state},\n//     city: {value:JSON.parse(localStorage.getItem(\"loginInfo\")).city},\n//     pincode: { value: JSON.parse(localStorage.getItem(\"loginInfo\")).pincode, hasError: true, touched: false, error: \"\" },\n//     landmark:{value: JSON.parse(localStorage.getItem(\"loginInfo\")).landmark,}\n//     //  availablestatus: 1,\n//     // ac_status: 1\n// }\n// const validateData = (name, value) => {\n//     let hasError = false, error = \"\";\n//     switch (name) {\n//         case \"uname\":\n//             let regex1 = /^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){3,8}[a-zA-Z0-9]$/;\n//             if (!regex1.test(value)) {\n//                 hasError = true;\n//                 error = \"User name A-Z a-z 0-9 ._- a-z len-10 \"\n//             }\n//             break;\n//         case \"password\":\n//             let regex2 = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{6,}$/;\n//             if (!regex2.test(value)) {\n//                 hasError = true;\n//                 error = \"len 6 one Upper & smaller char one number & special symbol \"\n//             }\n//             break;\n//         case \"drivername\":\n//             let regex3 = /^[A-Z][a-z]{2,15}$/;\n//             if (!regex3.test(value)) {\n//                 hasError = true;\n//                 error = \"len-15 Driver name - first letter capital, rest - small \"\n//             }\n//             break;\n//         case \"aregno\":\n//             let regex4 = /^[A-Z][A-Z][0-9]{10}$/;\n//             if (!regex4.test(value)) {\n//                 hasError = true;\n//                 error = \"Only capitals and number 10 length \"\n//             }\n//             break;\n//         case \"avehicalno\":\n//             let regex5 = /^[A-Z]{2}[ -][0-9]{1,2}(?: [A-Z])?(?: [A-Z]*)? [0-9]{4}$/;\n//             if (!regex5.test(value)) {\n//                 hasError = true;\n//                 error = \"Enter Corect RTO Number \"\n//             }\n//             break;\n//         case \"mono\":\n//             let regex6 = /^(\\+\\d{1,3}[- ]?)?\\d{10}$/;\n//             if (!regex6.test(value)) {\n//                 hasError = true;\n//                 error = \"10 digit mo no \"\n//             }\n//             break;\n//         case \"pincode\":\n//             let regex7 = /^[0-9]{6}$/;\n//             if (!regex7.test(value)) {\n//                 hasError = true;\n//                 error = \"len 6 digit  \"\n//             }\n//             break;\n//     }\n//     return { hasError, error }\n// }\n// const reducer = (state, action) => {\n//     switch (action.type) {\n//         case 'update':\n//             const { name, value, hasError, error, touched, isFormValid } = action.data;\n//             return {\n//                 // ...state, [action.field]: action.val\n//                 ...state,\n//                 [name]: { ...state[name], value, hasError, error, touched },\n//                 isFormValid\n//             };\n//         case 'clear':\n//             return init;\n//     }\n// }\n// //end==========================================\n// let UpdateAmbulanceProfile = () => {\n//     let aid = JSON.parse(localStorage.getItem(\"loginInfo\")).aid;\n//     const navigate = useNavigate();\n//     const [aprofile, setAProfile] = useState([]);\n//     useEffect(() => {\n//         console.log(\"calling server API\")\n//         fetch(\"http://localhost:8080/getprofiledetails?aid=\" + aid)\n//             .then(resp => resp.json())\n//             .then(data => { setAProfile(data)})\n//             .then(console.log(\"get data is\", aprofile.drivername))\n//     }, []);\n//     // const [ambulancesignup, dispatch] = useReducer(reducer, init);\n//     //strt=============================\n//     const [state, dispatch] = useReducer(reducer, init);\n//     // const [msg,setMsg] = useState(\"\");\n//     //on change event\n//     const onInputChange = (name, value, dispatch) => {\n//         //validation logic\n//         const { hasError, error } = validateData(name, value); //form field, latest value\n//         //which key to be modified - value, hasError, error, touched \n//         let isFormValid = true;\n//         for (const key in state) {\n//             let item = state[key];\n//             /*if(key === name && hasError)\n//             {\n//                 isFormValid = false;\n//                 break;\n//             }\n//             else if(key !== name && item.hasError)\n//             {\n//                 isFormValid = false;\n//                 break;\n//             }*/\n//             if (item.hasError) {\n//                 isFormValid = false;\n//                 break;\n//             }\n//         }\n//         //gethered one more value - isFormValid\n//         //dispatch({type:'update',data:{name,value,hasError,error,touched: true, isFormValid}})\n//         //sending action object\n//         dispatch({ type: 'update', data: { name, value, hasError, error, touched: true, isFormValid } })\n//     }\n//     const onFocusOut = (name, value, dispatch) => {\n//         const { hasError, error } = validateData(name, value)\n//         let isFormValid = true\n//         for (const key in state) {\n//             const item = state[key]\n//             if (key === name && hasError) {\n//                 isFormValid = false\n//                 break\n//             } else if (key !== name && item.hasError) {\n//                 isFormValid = false\n//                 break\n//             }\n//         }\n//         dispatch({\n//             type: \"update\",\n//             data: { name, value, hasError, error, touched: true, isFormValid },\n//         })\n//     }\n//     //end=====================================\n//     const updateData = (e) => {\n//         e.preventDefault()\n//         console.warn(\"is in Updata profile data..\")\n//         console.log(\"generated json obj is\",state)\n//         fetch(\"http://localhost:8080/updateambprofile?aid=\" + aid,\n//             {\n//                 method: \"PUT\",\n//                 headers:\n//                 {\n//                     \"Accept\": \"application/json\",\n//                     \"Content-type\": \"application/json\"\n//                 },\n//                 body: JSON.stringify({state})\n//             }).then(res => {\n//                 if (res.status == 200) {\n//                     alert(\"Profile Updated Sucessfully!!\")\n//                     navigate(\"/ambulanceprofilepg1\")\n//                 }\n//                 else {\n//                     alert(\"Some Proble Occures!!\")\n//                 }\n//             })\n//     }\n//     //end=====================================\n//     return (\n//         <div>\n//             <form className=\"formInput container mt-5\">\n//                 <div className=\"signup-form\">\n//                     <h3 className=\"form-title\">Update Your Information </h3>\n//                     {/* <div className=\"form-group\">\n//                 <label >Enter Username</label>\n//                 <input type=\"text\" className=\"form-control\" name=\"uname\" value={state.uname.value}\n//                     onChange={(e) => { onInputChange(\"uname\", e.target.value, dispatch) }}\n//                     onBlur={(e) => { onFocusOut(\"empno\", e.target.value, dispatch) }} />\n//                 <p style={{ display: state.uname.touched && state.uname.hasError ? \"block\" : \"none\", color: \"red\" }}> {state.uname.error} </p>\n//             </div>\n//             <div className=\"form-group\">\n//                 <label >Enter Password</label>\n//                 <input type=\"password\" className=\"form-control\" name=\"password\" value={state.password.value}\n//                     onChange={(e) => { onInputChange(\"password\", e.target.value, dispatch) }}\n//                     onBlur={(e) => { onFocusOut(\"password\", e.target.value, dispatch) }} />\n//                 <p style={{ display: state.password.touched && state.password.hasError ? \"block\" : \"none\", color: \"red\" }}> {state.password.error} </p>\n//             </div> */}\n//                     <div className=\"form-group\">\n//                         <label >Enter Driver Name</label>\n//                         <input type=\"text\" className=\"form-control\" name=\"drivername\" value={state.drivername.value} placeholder={aprofile.drivername}\n//                             onChange={(e) => { onInputChange(\"drivername\", e.target.value, dispatch) }}\n//                             onBlur={(e) => { onFocusOut(\"drivername\", e.target.value, dispatch) }} />\n//                         <p style={{ display: state.drivername.touched && state.drivername.hasError ? \"block\" : \"none\", color: \"red\" }}> {state.drivername.error} </p>\n//                     </div>\n//                     <div className=\"form-group\">\n//                         <label >Enter Ambulance Registration Number</label>\n//                         <input type=\"text\" className=\"form-control\" name=\"aregno\" value={state.aregno.value} placeholder={aprofile.aregno}\n//                             onChange={(e) => { onInputChange(\"aregno\", e.target.value, dispatch) }}\n//                             onBlur={(e) => { onFocusOut(\"aregno\", e.target.value, dispatch) }} />\n//                         <p style={{ display: state.aregno.touched && state.aregno.hasError ? \"block\" : \"none\", color: \"red\" }}> {state.aregno.error} </p>\n//                     </div>\n//                     {/* <div className=\"form-group\">\n//                 <label >Enter Ambulance Registration Number</label>\n//                 <input type=\"text\"  className=\"form-control\" name=\"aregno\" value={ambulancesignup.aregno}\n//                     onChange={(e) => { dispatch({ type: 'update', field: 'aregno', val: e.target.value }) }}\n//                 />\n//             </div> */}\n//                     <div className=\"form-group\">\n//                         <label >Enter Ambulance (Vehical) Number</label>\n//                         <input type=\"text\" className=\"form-control\" name=\"avehicalno\" value={state.avehicalno.value} placeholder={aprofile.avehicalno}\n//                             onChange={(e) => { onInputChange(\"avehicalno\", e.target.value, dispatch) }}\n//                             onBlur={(e) => { onFocusOut(\"avehicalno\", e.target.value, dispatch) }} />\n//                         <p style={{ display: state.avehicalno.touched && state.avehicalno.hasError ? \"block\" : \"none\", color: \"red\" }}> {state.avehicalno.error} </p>\n//                     </div>\n//                     {/* ********************* */}\n//                     <div className=\"form-group\">\n//                         <label >Enter Your Email</label>\n//                         <input type=\"email\" className=\"form-control\" name=\"email\" value={state.email.value} placeholder={aprofile.email}\n//                             onChange={(e) => { onInputChange(\"email\", e.target.value, dispatch) }}\n//                         />\n//                     </div>\n//                     <div className=\"form-group\">\n//                         <label >Enter Your Mobile Number</label>\n//                         <input type=\"number\" className=\"form-control\" name=\"mono\" value={state.mono.value} placeholder={aprofile.mono}\n//                             onChange={(e) => { onInputChange(\"mono\", e.target.value, dispatch) }}\n//                             onBlur={(e) => { onFocusOut(\"mono\", e.target.value, dispatch) }} />\n//                         <p style={{ display: state.mono.touched && state.mono.hasError ? \"block\" : \"none\", color: \"red\" }}> {state.mono.error} </p>\n//                     </div>\n//                     <div className=\"form-group\">\n//                         <label >Enter Your Website (If having)</label>\n//                         <input type=\"text\" className=\"form-control\" name=\"website\" value={state.website.value} placeholder={aprofile.website}\n//                             onChange={(e) => { onInputChange(\"website\", e.target.value, dispatch) }}\n//                         />\n//                     </div>\n//                     <div className=\"form-group\">\n//                         <label >Enter State</label>\n//                         <input type=\"text\" className=\"form-control\" name=\"state\" value={state.state.value} placeholder={aprofile.state}\n//                             onChange={(e) => { onInputChange(\"state\", e.target.value, dispatch) }}\n//                         />\n//                     </div>\n//                     <div className=\"form-group\">\n//                         <label >Enter City</label>\n//                         <input type=\"text\" className=\"form-control\" name=\"city\" value={state.city.value} placeholder={aprofile.city}\n//                             onChange={(e) => { onInputChange(\"city\", e.target.value, dispatch) }}\n//                         />\n//                     </div>\n//                     <div className=\"form-group\">\n//                         <label >Enter Pincode</label>\n//                         <input type=\"number\" className=\"form-control\" name=\"pincode\" value={state.pincode.value} placeholder={aprofile.pincode}\n//                             onChange={(e) => { onInputChange(\"pincode\", e.target.value, dispatch) }}\n//                             onBlur={(e) => { onFocusOut(\"pincode\", e.target.value, dispatch) }} />\n//                         <p style={{ display: state.pincode.touched && state.pincode.hasError ? \"block\" : \"none\", color: \"red\" }}> {state.pincode.error} </p>\n//                     </div>\n//                     <div className=\"form-group\">\n//                         <label >Enter landmark</label>\n//                         <input type=\"text\" className=\"form-control\" name=\"landmark\" value={state.landmark.value} placeholder={aprofile.landmark}\n//                             onChange={(e) => { onInputChange(\"landmark\", e.target.value, dispatch) }}\n//                         />\n//                     </div>\n//                     <div className=\"form-group\">\n//                         {/* <button className=\"btn btn-primary btn-blob\" disabled={state.isFormValid ? false : true} */}\n//                         <button className=\"btn btn-primary btn-blob\" \n//                             onClick={(e) => { updateData(e) }} >Submit</button>\n//                         {/* <span style={{ padding: '20px' }}></span>\n//                 <input type=\"button\" className=\"btn btn-primary btn-blob\" value='reset'\n//                     onClick={() => { dispatch({ type: 'reset' }) }} /> */}\n//                     </div>\n//                 </div>\n//             </form>\n//             {/* {JSON.stringify(ambulancesignup)} */}\n//         </div>\n//     )\n// }\n// export default UpdateAmbulanceProfile;","map":{"version":3,"names":[],"sources":["C:/Users/Dipendra/Desktop/prj imgs/Landing pg/reacttemplate/src/ambulance/UpdateAmbulanceProfile.js"],"sourcesContent":["\r\n\r\n// import { useEffect, useReducer, useState } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n\r\n// const init = {\r\n//     // for loginAll table\r\n//     // uname: { value: \"\", hasError: true, touched: false, error: \"\" },\r\n//     // password: { value: \"\", hasError: true, touched: false, error: \"\" },\r\n//     // role: \"Ambulance\",\r\n//     // let aid = JSON.parse(localStorage.getItem(\"loginInfo\")).aid;\r\n\r\n\r\n//     drivername: { value: JSON.parse(localStorage.getItem(\"loginInfo\")).drivername, hasError: true, touched: false, error: \"\" },\r\n//     // drivername: { value: \"\", hasError: true, touched: false, error: \"\" },\r\n//     aregno: { value: JSON.parse(localStorage.getItem(\"loginInfo\")).aregno, hasError: true, touched: false, error: \"\" },\r\n//     avehicalno: { value: JSON.parse(localStorage.getItem(\"loginInfo\")).avehicalno, hasError: true, touched: false, error: \"\" },\r\n    \r\n//     email: {value:JSON.parse(localStorage.getItem(\"loginInfo\")).email},\r\n//     mono: { value: JSON.parse(localStorage.getItem(\"loginInfo\")).mono, hasError: true, touched: false, error: \"\" },\r\n    \r\n//     website: {value:JSON.parse(localStorage.getItem(\"loginInfo\")).website},\r\n//     state:{value: JSON.parse(localStorage.getItem(\"loginInfo\")).state},\r\n//     city: {value:JSON.parse(localStorage.getItem(\"loginInfo\")).city},\r\n    \r\n//     pincode: { value: JSON.parse(localStorage.getItem(\"loginInfo\")).pincode, hasError: true, touched: false, error: \"\" },\r\n   \r\n//     landmark:{value: JSON.parse(localStorage.getItem(\"loginInfo\")).landmark,}\r\n//     //  availablestatus: 1,\r\n//     // ac_status: 1\r\n// }\r\n\r\n\r\n// const validateData = (name, value) => {\r\n//     let hasError = false, error = \"\";\r\n//     switch (name) {\r\n//         case \"uname\":\r\n//             let regex1 = /^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){3,8}[a-zA-Z0-9]$/;\r\n//             if (!regex1.test(value)) {\r\n//                 hasError = true;\r\n//                 error = \"User name A-Z a-z 0-9 ._- a-z len-10 \"\r\n//             }\r\n//             break;\r\n\r\n//         case \"password\":\r\n//             let regex2 = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{6,}$/;\r\n//             if (!regex2.test(value)) {\r\n//                 hasError = true;\r\n//                 error = \"len 6 one Upper & smaller char one number & special symbol \"\r\n//             }\r\n//             break;\r\n\r\n//         case \"drivername\":\r\n//             let regex3 = /^[A-Z][a-z]{2,15}$/;\r\n//             if (!regex3.test(value)) {\r\n//                 hasError = true;\r\n//                 error = \"len-15 Driver name - first letter capital, rest - small \"\r\n//             }\r\n//             break;\r\n\r\n//         case \"aregno\":\r\n//             let regex4 = /^[A-Z][A-Z][0-9]{10}$/;\r\n//             if (!regex4.test(value)) {\r\n//                 hasError = true;\r\n//                 error = \"Only capitals and number 10 length \"\r\n//             }\r\n//             break;\r\n\r\n//         case \"avehicalno\":\r\n//             let regex5 = /^[A-Z]{2}[ -][0-9]{1,2}(?: [A-Z])?(?: [A-Z]*)? [0-9]{4}$/;\r\n//             if (!regex5.test(value)) {\r\n//                 hasError = true;\r\n//                 error = \"Enter Corect RTO Number \"\r\n//             }\r\n//             break;\r\n\r\n//         case \"mono\":\r\n//             let regex6 = /^(\\+\\d{1,3}[- ]?)?\\d{10}$/;\r\n//             if (!regex6.test(value)) {\r\n//                 hasError = true;\r\n//                 error = \"10 digit mo no \"\r\n//             }\r\n//             break;\r\n\r\n//         case \"pincode\":\r\n//             let regex7 = /^[0-9]{6}$/;\r\n//             if (!regex7.test(value)) {\r\n//                 hasError = true;\r\n//                 error = \"len 6 digit  \"\r\n//             }\r\n//             break;\r\n\r\n\r\n//     }\r\n//     return { hasError, error }\r\n\r\n// }\r\n\r\n// const reducer = (state, action) => {\r\n//     switch (action.type) {\r\n//         case 'update':\r\n//             const { name, value, hasError, error, touched, isFormValid } = action.data;\r\n//             return {\r\n//                 // ...state, [action.field]: action.val\r\n//                 ...state,\r\n//                 [name]: { ...state[name], value, hasError, error, touched },\r\n//                 isFormValid\r\n//             };\r\n//         case 'clear':\r\n//             return init;\r\n//     }\r\n\r\n// }\r\n\r\n// //end==========================================\r\n\r\n// let UpdateAmbulanceProfile = () => {\r\n\r\n//     let aid = JSON.parse(localStorage.getItem(\"loginInfo\")).aid;\r\n//     const navigate = useNavigate();\r\n//     const [aprofile, setAProfile] = useState([]);\r\n\r\n\r\n//     useEffect(() => {\r\n//         console.log(\"calling server API\")\r\n\r\n//         fetch(\"http://localhost:8080/getprofiledetails?aid=\" + aid)\r\n//             .then(resp => resp.json())\r\n//             .then(data => { setAProfile(data)})\r\n//             .then(console.log(\"get data is\", aprofile.drivername))\r\n//     }, []);\r\n\r\n\r\n\r\n//     // const [ambulancesignup, dispatch] = useReducer(reducer, init);\r\n\r\n//     //strt=============================\r\n//     const [state, dispatch] = useReducer(reducer, init);\r\n//     // const [msg,setMsg] = useState(\"\");\r\n\r\n//     //on change event\r\n//     const onInputChange = (name, value, dispatch) => {\r\n//         //validation logic\r\n//         const { hasError, error } = validateData(name, value); //form field, latest value\r\n\r\n//         //which key to be modified - value, hasError, error, touched \r\n//         let isFormValid = true;\r\n//         for (const key in state) {\r\n//             let item = state[key];\r\n//             /*if(key === name && hasError)\r\n//             {\r\n//                 isFormValid = false;\r\n//                 break;\r\n//             }\r\n//             else if(key !== name && item.hasError)\r\n//             {\r\n//                 isFormValid = false;\r\n//                 break;\r\n//             }*/\r\n//             if (item.hasError) {\r\n//                 isFormValid = false;\r\n//                 break;\r\n//             }\r\n//         }\r\n//         //gethered one more value - isFormValid\r\n//         //dispatch({type:'update',data:{name,value,hasError,error,touched: true, isFormValid}})\r\n\r\n//         //sending action object\r\n//         dispatch({ type: 'update', data: { name, value, hasError, error, touched: true, isFormValid } })\r\n\r\n//     }\r\n\r\n//     const onFocusOut = (name, value, dispatch) => {\r\n//         const { hasError, error } = validateData(name, value)\r\n//         let isFormValid = true\r\n//         for (const key in state) {\r\n//             const item = state[key]\r\n//             if (key === name && hasError) {\r\n//                 isFormValid = false\r\n//                 break\r\n//             } else if (key !== name && item.hasError) {\r\n//                 isFormValid = false\r\n//                 break\r\n//             }\r\n//         }\r\n//         dispatch({\r\n//             type: \"update\",\r\n//             data: { name, value, hasError, error, touched: true, isFormValid },\r\n//         })\r\n//     }\r\n//     //end=====================================\r\n\r\n//     const updateData = (e) => {\r\n\r\n//         e.preventDefault()\r\n//         console.warn(\"is in Updata profile data..\")\r\n//         console.log(\"generated json obj is\",state)\r\n\r\n//         fetch(\"http://localhost:8080/updateambprofile?aid=\" + aid,\r\n//             {\r\n//                 method: \"PUT\",\r\n//                 headers:\r\n//                 {\r\n//                     \"Accept\": \"application/json\",\r\n//                     \"Content-type\": \"application/json\"\r\n//                 },\r\n//                 body: JSON.stringify({state})\r\n//             }).then(res => {\r\n//                 if (res.status == 200) {\r\n//                     alert(\"Profile Updated Sucessfully!!\")\r\n//                     navigate(\"/ambulanceprofilepg1\")\r\n//                 }\r\n//                 else {\r\n//                     alert(\"Some Proble Occures!!\")\r\n//                 }\r\n\r\n//             })\r\n\r\n//     }\r\n\r\n//     //end=====================================\r\n\r\n\r\n//     return (\r\n\r\n\r\n//         <div>\r\n//             <form className=\"formInput container mt-5\">\r\n//                 <div className=\"signup-form\">\r\n\r\n//                     <h3 className=\"form-title\">Update Your Information </h3>\r\n\r\n//                     {/* <div className=\"form-group\">\r\n\r\n//                 <label >Enter Username</label>\r\n//                 <input type=\"text\" className=\"form-control\" name=\"uname\" value={state.uname.value}\r\n//                     onChange={(e) => { onInputChange(\"uname\", e.target.value, dispatch) }}\r\n//                     onBlur={(e) => { onFocusOut(\"empno\", e.target.value, dispatch) }} />\r\n//                 <p style={{ display: state.uname.touched && state.uname.hasError ? \"block\" : \"none\", color: \"red\" }}> {state.uname.error} </p>\r\n\r\n\r\n//             </div>\r\n\r\n\r\n\r\n//             <div className=\"form-group\">\r\n\r\n//                 <label >Enter Password</label>\r\n//                 <input type=\"password\" className=\"form-control\" name=\"password\" value={state.password.value}\r\n//                     onChange={(e) => { onInputChange(\"password\", e.target.value, dispatch) }}\r\n//                     onBlur={(e) => { onFocusOut(\"password\", e.target.value, dispatch) }} />\r\n//                 <p style={{ display: state.password.touched && state.password.hasError ? \"block\" : \"none\", color: \"red\" }}> {state.password.error} </p>\r\n\r\n\r\n//             </div> */}\r\n\r\n\r\n//                     <div className=\"form-group\">\r\n//                         <label >Enter Driver Name</label>\r\n//                         <input type=\"text\" className=\"form-control\" name=\"drivername\" value={state.drivername.value} placeholder={aprofile.drivername}\r\n//                             onChange={(e) => { onInputChange(\"drivername\", e.target.value, dispatch) }}\r\n//                             onBlur={(e) => { onFocusOut(\"drivername\", e.target.value, dispatch) }} />\r\n//                         <p style={{ display: state.drivername.touched && state.drivername.hasError ? \"block\" : \"none\", color: \"red\" }}> {state.drivername.error} </p>\r\n\r\n//                     </div>\r\n\r\n\r\n//                     <div className=\"form-group\">\r\n//                         <label >Enter Ambulance Registration Number</label>\r\n//                         <input type=\"text\" className=\"form-control\" name=\"aregno\" value={state.aregno.value} placeholder={aprofile.aregno}\r\n//                             onChange={(e) => { onInputChange(\"aregno\", e.target.value, dispatch) }}\r\n//                             onBlur={(e) => { onFocusOut(\"aregno\", e.target.value, dispatch) }} />\r\n//                         <p style={{ display: state.aregno.touched && state.aregno.hasError ? \"block\" : \"none\", color: \"red\" }}> {state.aregno.error} </p>\r\n\r\n//                     </div>\r\n\r\n\r\n//                     {/* <div className=\"form-group\">\r\n//                 <label >Enter Ambulance Registration Number</label>\r\n//                 <input type=\"text\"  className=\"form-control\" name=\"aregno\" value={ambulancesignup.aregno}\r\n//                     onChange={(e) => { dispatch({ type: 'update', field: 'aregno', val: e.target.value }) }}\r\n\r\n//                 />\r\n\r\n//             </div> */}\r\n\r\n\r\n//                     <div className=\"form-group\">\r\n//                         <label >Enter Ambulance (Vehical) Number</label>\r\n//                         <input type=\"text\" className=\"form-control\" name=\"avehicalno\" value={state.avehicalno.value} placeholder={aprofile.avehicalno}\r\n//                             onChange={(e) => { onInputChange(\"avehicalno\", e.target.value, dispatch) }}\r\n//                             onBlur={(e) => { onFocusOut(\"avehicalno\", e.target.value, dispatch) }} />\r\n//                         <p style={{ display: state.avehicalno.touched && state.avehicalno.hasError ? \"block\" : \"none\", color: \"red\" }}> {state.avehicalno.error} </p>\r\n\r\n//                     </div>\r\n\r\n//                     {/* ********************* */}\r\n//                     <div className=\"form-group\">\r\n//                         <label >Enter Your Email</label>\r\n//                         <input type=\"email\" className=\"form-control\" name=\"email\" value={state.email.value} placeholder={aprofile.email}\r\n//                             onChange={(e) => { onInputChange(\"email\", e.target.value, dispatch) }}\r\n//                         />\r\n\r\n//                     </div>\r\n\r\n\r\n//                     <div className=\"form-group\">\r\n//                         <label >Enter Your Mobile Number</label>\r\n//                         <input type=\"number\" className=\"form-control\" name=\"mono\" value={state.mono.value} placeholder={aprofile.mono}\r\n//                             onChange={(e) => { onInputChange(\"mono\", e.target.value, dispatch) }}\r\n//                             onBlur={(e) => { onFocusOut(\"mono\", e.target.value, dispatch) }} />\r\n//                         <p style={{ display: state.mono.touched && state.mono.hasError ? \"block\" : \"none\", color: \"red\" }}> {state.mono.error} </p>\r\n\r\n\r\n//                     </div>\r\n\r\n\r\n//                     <div className=\"form-group\">\r\n//                         <label >Enter Your Website (If having)</label>\r\n//                         <input type=\"text\" className=\"form-control\" name=\"website\" value={state.website.value} placeholder={aprofile.website}\r\n//                             onChange={(e) => { onInputChange(\"website\", e.target.value, dispatch) }}\r\n//                         />\r\n//                     </div>\r\n\r\n\r\n//                     <div className=\"form-group\">\r\n//                         <label >Enter State</label>\r\n//                         <input type=\"text\" className=\"form-control\" name=\"state\" value={state.state.value} placeholder={aprofile.state}\r\n//                             onChange={(e) => { onInputChange(\"state\", e.target.value, dispatch) }}\r\n//                         />\r\n\r\n//                     </div>\r\n\r\n\r\n//                     <div className=\"form-group\">\r\n//                         <label >Enter City</label>\r\n//                         <input type=\"text\" className=\"form-control\" name=\"city\" value={state.city.value} placeholder={aprofile.city}\r\n//                             onChange={(e) => { onInputChange(\"city\", e.target.value, dispatch) }}\r\n//                         />\r\n//                     </div>\r\n\r\n\r\n//                     <div className=\"form-group\">\r\n//                         <label >Enter Pincode</label>\r\n//                         <input type=\"number\" className=\"form-control\" name=\"pincode\" value={state.pincode.value} placeholder={aprofile.pincode}\r\n//                             onChange={(e) => { onInputChange(\"pincode\", e.target.value, dispatch) }}\r\n//                             onBlur={(e) => { onFocusOut(\"pincode\", e.target.value, dispatch) }} />\r\n//                         <p style={{ display: state.pincode.touched && state.pincode.hasError ? \"block\" : \"none\", color: \"red\" }}> {state.pincode.error} </p>\r\n\r\n\r\n//                     </div>\r\n//                     <div className=\"form-group\">\r\n//                         <label >Enter landmark</label>\r\n//                         <input type=\"text\" className=\"form-control\" name=\"landmark\" value={state.landmark.value} placeholder={aprofile.landmark}\r\n//                             onChange={(e) => { onInputChange(\"landmark\", e.target.value, dispatch) }}\r\n//                         />\r\n\r\n//                     </div>\r\n//                     <div className=\"form-group\">\r\n//                         {/* <button className=\"btn btn-primary btn-blob\" disabled={state.isFormValid ? false : true} */}\r\n//                         <button className=\"btn btn-primary btn-blob\" \r\n//                             onClick={(e) => { updateData(e) }} >Submit</button>\r\n//                         {/* <span style={{ padding: '20px' }}></span>\r\n//                 <input type=\"button\" className=\"btn btn-primary btn-blob\" value='reset'\r\n//                     onClick={() => { dispatch({ type: 'reset' }) }} /> */}\r\n\r\n//                     </div>\r\n//                 </div>\r\n//             </form>\r\n\r\n//             {/* {JSON.stringify(ambulancesignup)} */}\r\n\r\n//         </div>\r\n//     )\r\n\r\n\r\n// }\r\n// export default UpdateAmbulanceProfile;"],"mappings},"metadata":{},"sourceType":"module"}